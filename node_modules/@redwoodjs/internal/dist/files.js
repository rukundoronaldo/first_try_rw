"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.isGraphQLSchemaFile = exports.isDirectoryNamedModuleFile = exports.isPageFile = exports.isCellFile = exports.findGraphQLSchemas = exports.findDirectoryNamedModules = exports.findPages = exports.findCells = void 0;

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _endsWith = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/ends-with"));

var _findIndex = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/find-index"));

var _startsWith = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/starts-with"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _fastGlob = _interopRequireDefault(require("fast-glob"));

var _ast = require("./ast");

var _paths = require("./paths");

const findCells = (cwd = (0, _paths.getPaths)().web.src) => {
  const modules = _fastGlob.default.sync('**/*Cell.{js,jsx,ts,tsx}', {
    cwd,
    absolute: true,
    ignore: ['node_modules']
  });

  return (0, _filter.default)(modules).call(modules, isCellFile);
};

exports.findCells = findCells;

const findPages = (cwd = (0, _paths.getPaths)().web.pages) => {
  const modules = _fastGlob.default.sync('**/*Page.{tsx,js,jsx}', {
    cwd,
    absolute: true,
    ignore: ['node_modules']
  });

  return (0, _filter.default)(modules).call(modules, isPageFile);
};

exports.findPages = findPages;

const findDirectoryNamedModules = (cwd = (0, _paths.getPaths)().base) => {
  var _context;

  const modules = _fastGlob.default.sync('**/src/**/*.{ts,js,jsx,tsx}', {
    cwd,
    absolute: true,
    ignore: ['node_modules']
  }); // Cell's also follow use the directory-named-module pattern,
  // but they get their own special type mirror file, so ignore them.


  return (0, _filter.default)(_context = (0, _filter.default)(modules).call(modules, isDirectoryNamedModuleFile)).call(_context, p => !isCellFile(p));
};

exports.findDirectoryNamedModules = findDirectoryNamedModules;

const findGraphQLSchemas = (cwd = (0, _paths.getPaths)().api.graphql) => {
  var _context2;

  return (0, _filter.default)(_context2 = _fastGlob.default.sync('**/*.sdl.{ts,js}', {
    cwd,
    absolute: true
  })).call(_context2, isGraphQLSchemaFile);
};

exports.findGraphQLSchemas = findGraphQLSchemas;

const isCellFile = p => {
  const {
    dir,
    name
  } = _path.default.parse(p); // A Cell must be a directory named module.


  if (!(0, _endsWith.default)(dir).call(dir, name)) {
    return false;
  }

  const code = _fs.default.readFileSync(p, 'utf-8'); // A Cell should not have a default export.


  if ((0, _ast.hasDefaultExport)(code)) {
    return false;
  } // A Cell must export QUERY and Success.


  const exports = (0, _ast.getNamedExports)(code);
  const exportedQUERY = (0, _findIndex.default)(exports).call(exports, v => v.name === 'QUERY') !== -1;
  const exportedSuccess = (0, _findIndex.default)(exports).call(exports, v => v.name === 'Success') !== -1;

  if (!exportedQUERY && !exportedSuccess) {
    return false;
  }

  return true;
};

exports.isCellFile = isCellFile;

const isPageFile = p => {
  const {
    dir,
    name
  } = _path.default.parse(p); // A page must end with "Page.{jsx,js,tsx}".


  if (!(0, _endsWith.default)(name).call(name, 'Page')) {
    return false;
  } // A page should be in the `web/src/pages` directory.


  const r = _path.default.relative((0, _paths.getPaths)().web.pages, dir);

  if (!r && (0, _startsWith.default)(r).call(r, '..') && _path.default.isAbsolute(r)) {
    return false;
  } // A Page should have a default export.


  const code = _fs.default.readFileSync(p, 'utf-8');

  if (!(0, _ast.hasDefaultExport)(code)) {
    return false;
  }

  return true;
};

exports.isPageFile = isPageFile;

const isDirectoryNamedModuleFile = p => {
  const {
    dir,
    name
  } = _path.default.parse(p);

  return (0, _endsWith.default)(dir).call(dir, name);
};

exports.isDirectoryNamedModuleFile = isDirectoryNamedModuleFile;

const isGraphQLSchemaFile = p => {
  var _p$match;

  if (!((_p$match = p.match(/\.sdl\.(ts|js)$/)) !== null && _p$match !== void 0 && _p$match[0])) {
    return false;
  }

  const code = _fs.default.readFileSync(p, 'utf-8');

  const exports = (0, _ast.getNamedExports)(code);
  return (0, _findIndex.default)(exports).call(exports, v => v.name === 'schema') !== -1;
};

exports.isGraphQLSchemaFile = isGraphQLSchemaFile;