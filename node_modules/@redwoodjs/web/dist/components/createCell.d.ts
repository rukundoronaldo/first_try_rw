/// <reference types="react" />
import type { DocumentNode } from 'graphql';
import type { A } from 'ts-toolbelt';
export declare type DataObject = {
    [key: string]: unknown;
};
export declare type CellFailureProps = (Omit<QueryOperationResult, 'data' | 'loading'> & {
    updating: boolean;
}) | {
    error: Error;
};
export declare type CellLoadingProps = Omit<QueryOperationResult, 'error' | 'loading' | 'data'>;
export declare type CellSuccessProps<TData = any> = Partial<Omit<QueryOperationResult<TData>, 'error' | 'data'> & {
    updating: boolean;
}> & A.Compute<TData>;
export interface CreateCellProps<CellProps> {
    beforeQuery?: <TProps>(props: TProps) => {
        variables: TProps;
    };
    QUERY: DocumentNode | ((variables: Record<string, unknown>) => DocumentNode);
    afterQuery?: (data: DataObject) => DataObject;
    Loading?: React.FC<CellLoadingProps & Partial<CellProps>>;
    Failure?: React.FC<CellFailureProps & Partial<CellProps>>;
    Empty?: React.FC<CellLoadingProps & Partial<CellProps>>;
    Success: React.FC<CellSuccessProps & Partial<CellProps>>;
}
export declare function createCell<CellProps = any>({ beforeQuery, QUERY, afterQuery, Loading, Failure, Empty, Success, }: CreateCellProps<CellProps>): React.FC<CellProps>;
//# sourceMappingURL=createCell.d.ts.map