/// <reference types="node" />
import type { RuleValidator, ValidatorCollection, RuleOptions, SkipArgs } from "./types";
export declare const InsecureServiceError: {
    new (resolverName: string): {
        name: string;
        message: string;
        stack?: string | undefined;
    };
    captureStackTrace(targetObject: object, constructorOpt?: Function | undefined): void;
    prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;
    stackTraceLimit: number;
};
export declare const MissingBeforeResolverError: {
    new (servicePath: string): {
        name: string;
        message: string;
        stack?: string | undefined;
    };
    captureStackTrace(targetObject: object, constructorOpt?: Function | undefined): void;
    prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;
    stackTraceLimit: number;
};
export declare const BeforeResolverSpec: {
    new (serviceNames: string[]): {
        befores: Record<string, ValidatorCollection>;
        add(functions: RuleValidator | Array<RuleValidator>, options?: RuleOptions | undefined): void;
        skip(args_0?: RuleValidator | RuleValidator[] | RuleOptions | undefined, args_1?: RuleOptions | undefined): void;
        verify(name: string, args: Array<unknown>): void[];
        _initValidators(name: string): void;
        _shouldApplyValidator(name: string, options?: RuleOptions | undefined): boolean | undefined;
        _shouldSkipValidator(name: string, options?: RuleOptions | undefined): boolean | undefined;
        _parseSkipArgs([functionsOrOptions, opts]: SkipArgs): {
            skipValidators: (RuleValidator | undefined)[];
            options: RuleOptions | undefined;
            applyToAll: boolean;
        };
        _isOptions(functionsOrOptions?: RuleValidator | RuleValidator[] | RuleOptions | undefined): functionsOrOptions is RuleOptions;
        _markServiceSkippable(name: string): void;
        _canSkipService(name: string): boolean;
        _isInsecureService(name: string): boolean;
        _invokeValidators(name: string, args: Array<unknown>): void[];
        _forEachService(iterator: (serviceName: string) => void): void;
    };
};
//# sourceMappingURL=beforeResolverSpec.d.ts.map