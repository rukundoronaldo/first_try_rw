"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVersion = void 0;
const debug_1 = __importDefault(require("@prisma/debug"));
const fetch_engine_1 = require("@prisma/fetch-engine");
const execa_1 = __importDefault(require("execa"));
const resolveBinary_1 = require("../resolveBinary");
const debug = debug_1.default('prisma:getVersion');
const MAX_BUFFER = 1000000000;
async function getVersion(enginePath, binaryName = fetch_engine_1.EngineTypes.queryEngine) {
    enginePath = await resolveBinary_1.resolveBinary(binaryName, enginePath);
    if (binaryName === fetch_engine_1.EngineTypes.libqueryEngineNapi) {
        const QE = require(enginePath);
        return `libquery-engine-napi ${QE.version().commit}`;
    }
    else {
        const result = await execa_1.default(enginePath, ['--version'], {
            maxBuffer: MAX_BUFFER,
        });
        return result.stdout;
    }
}
exports.getVersion = getVersion;
//# sourceMappingURL=getVersion.js.map